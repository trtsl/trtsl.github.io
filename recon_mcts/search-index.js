var searchIndex = JSON.parse('{\
"recon_mcts":{"doc":"A recombining and concurrent implementation of Monte Carlo…","i":[[3,"GetState","recon_mcts","Slower performance but better memory efficiency for large…",null,null],[3,"HashOnly","","There\'s a chance of hash collision, which would mean that…",null,null],[3,"StoreState","","Memory usage is state dependent (could use lots of storage…",null,null],[3,"ArcWrap","","",null,null],[3,"Node","","The fundamental type composing a `Tree`.",null,null],[3,"NodeInfo","","Contains information about a specific `Node`.",null,null],[12,"depth","","",0,null],[12,"state","","",0,null],[12,"player","","",0,null],[12,"score","","",0,null],[12,"n_parents","","",0,null],[12,"n_children","","",0,null],[3,"RegistryInfo","","Contains information about a `Tree`\'s registry.",null,null],[12,"hits","","",1,null],[12,"misses","","",1,null],[12,"len","","",1,null],[3,"Tree","","An acyclic collection of connected `Node`s with a unique…",null,null],[3,"WeakWrap","","",null,null],[4,"SelectNodeState","","A flag indicating whether an action is being evaluated for…",null,null],[13,"Explore","","",2,null],[13,"Exploit","","",2,null],[4,"Status","","Provides information about the result of applying a…",null,null],[13,"Pending","","It is currently unknown whether the game is over or not.",3,null],[13,"ActionWip","","Actions are available, but not all branches have been…",3,null],[13,"Action","","Actions are available, and all branches have been created.",3,null],[13,"Terminal","","The game is over.",3,null],[11,"get_node_info","","",4,[[],["nodeinfo",3]]],[11,"new","","Construct a new `Tree`.",5,[[]]],[0,"state_memory","","Provides mixins to statically configure how each node\'s…",null,null],[3,"StoreState","recon_mcts::state_memory","Memory usage is state dependent (could use lots of storage…",null,null],[3,"GetState","","Slower performance but better memory efficiency for large…",null,null],[3,"HashOnly","","There\'s a chance of hash collision, which would mean that…",null,null],[8,"StateMemory","","A trait used to modify how states are stored in the…",null,null],[16,"State","","",6,null],[10,"eq","","",6,[[]]],[10,"modify_state","","",6,[[["rwlock",3]]]],[6,"ArcNode","recon_mcts","",null,null],[6,"WeakNode","","",null,null],[6,"NodeAlias","","",null,null],[6,"TreeAlias","","",null,null],[8,"BaseGD","","A trait that can be used to implemented [`DynGD`] without…",null,null],[16,"Player","","",7,null],[16,"State","","",7,null],[16,"Action","","",7,null],[16,"Score","","",7,null],[16,"ActionIter","","",7,null],[10,"available_actions","","",7,[[],["option",4]]],[10,"apply_action","","",7,[[],["option",4]]],[10,"score_leaf","","",7,[[["option",4]],["option",4]]],[8,"DynGD","","A supertrait of [`BaseGD`]. Its purpose is to implement…",null,null],[10,"select_node","","",8,[[["selectnodestate",4],["iterator",8],["option",4]]]],[10,"backprop_scores","","",8,[[["iterator",8],["option",4]],["option",4]]],[8,"GameDynamics","","Requires implementation by the user in order to provide…",null,null],[16,"Player","","Most likely an enum to designate which player is allowed…",9,null],[16,"State","","A type that complete describes the state of the game. The…",9,null],[16,"Action","","Most likely an enum or integer value to describe the…",9,null],[16,"Score","","A type that represents an evaluation of `Self::State`.…",9,null],[16,"ActionIter","","An iterator used to establish the available actions and…",9,null],[10,"available_actions","","Convert an input state into the available actions / moves.…",9,[[],["option",4]]],[10,"apply_action","","Modify the state input (i.e. game board) with an action.",9,[[],["option",4]]],[10,"select_node","","Select the action to take based on the scores.",9,[[["option",4],["selectnodestate",4]]]],[10,"backprop_scores","","Score a parent node based on its child nodes.",9,[[["option",4]],["option",4]]],[10,"score_leaf","","Take a leaf node\'s state and assign the node a score,…",9,[[["option",4]],["option",4]]],[8,"StateMemory","","A trait used to modify how states are stored in the…",null,null],[16,"State","","",6,null],[10,"eq","","",6,[[]]],[10,"modify_state","","",6,[[["rwlock",3]]]],[8,"OnDrop","","A trait used to remove nodes from the transposition table…",null,null],[10,"on_drop","","",10,[[["arcwrap",3]]]],[8,"SearchTree","","An interface to reduce the number of bounds required to…",null,null],[16,"GD","","A type that implements `GameDynamics`.",11,null],[16,"Memory","","A `state_memory` mixin type used to configure how a…",11,null],[10,"step","","Performs one iteration to expand the `SearchTree`. Returns…",11,[[],["option",4]]],[10,"best_action","","Returns a `Status` with the currently anticipated…",11,[[],["status",4]]],[10,"apply_action","","Move the root based on the selected action",11,[[]]],[10,"apply_best_action","","Check for the best action and then apply it to move the root",11,[[],["status",4]]],[10,"get_root_info","","Returns a `NodeInfo` for the `SearchTree`\'s root.",11,[[],["nodeinfo",3]]],[10,"get_next_move_info","","Returns `Some(Vec<(GameDynamics::Action, NodeInfo)>)` of…",11,[[],[["vec",3],["option",4]]]],[10,"find_children_sorted_with_depth","","Returns a vector of topologically sorted `(ArcNode,…",11,[[],["vec",3]]],[10,"get_registry_nodes","","Returns a `HashSet` of all `Node`s currently in the…",11,[[],[["hashset",3],["weakwrap",3]]]],[10,"get_registry_info","","Returns summary statistics for the `SearchTree`\'s registry.",11,[[],["registryinfo",3]]],[10,"get_game_dynamics","","Returns a reference to the game dynamics.",11,[[],["arc",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"step","","",17,[[],["option",4]]],[11,"best_action","","",17,[[],["status",4]]],[11,"apply_action","","",17,[[]]],[11,"apply_best_action","","",17,[[],["status",4]]],[11,"get_root_info","","",17,[[],["nodeinfo",3]]],[11,"get_next_move_info","","",17,[[],[["vec",3],["option",4]]]],[11,"find_children_sorted_with_depth","","",17,[[],["vec",3]]],[11,"get_registry_nodes","","",17,[[],[["hashset",3],["weakwrap",3]]]],[11,"get_registry_info","","",17,[[],["registryinfo",3]]],[11,"get_game_dynamics","","",17,[[],["arc",3]]],[11,"get_tree","","",17,[[],["treealias",6]]],[11,"eq","","",4,[[]]],[11,"modify_state","","",4,[[["rwlock",3]]]],[11,"eq","","",4,[[]]],[11,"modify_state","","",4,[[["rwlock",3]]]],[11,"eq","","",4,[[]]],[11,"modify_state","","",4,[[["rwlock",3]]]],[11,"on_drop","","",4,[[["arcwrap",3]]]],[11,"drop","","",15,[[]]],[11,"clone","","",3,[[],["status",4]]],[11,"clone","","",0,[[],["nodeinfo",3]]],[11,"clone","","",15,[[]]],[11,"clone","","",16,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",15,[[["arcwrap",3]]]],[11,"ne","","",15,[[["arcwrap",3]]]],[11,"eq","","",16,[[]]],[11,"deref","","",15,[[]]],[11,"deref","","",16,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]]],"p":[[3,"NodeInfo"],[3,"RegistryInfo"],[4,"SelectNodeState"],[4,"Status"],[3,"Node"],[3,"Tree"],[8,"StateMemory"],[8,"BaseGD"],[8,"DynGD"],[8,"GameDynamics"],[8,"OnDrop"],[8,"SearchTree"],[3,"GetState"],[3,"HashOnly"],[3,"StoreState"],[3,"ArcWrap"],[3,"WeakWrap"],[6,"TreeAlias"]]},\
"recon_mcts_test_nim":{"doc":"A `recon_mcts` API demonstration of a simple Nim variant.…","i":[],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);